# -*- coding: utf-8 -*-
"""Omsk_dron_hack_detection_robo23.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11sD4K5g9VVR-BGNN0VCLoOcpis9R1eyG
"""

from google.colab import drive
drive.mount('/content/gdrive')

import os
from os import listdir
from os import walk
import numpy as np
import torch
import torch.utils.data
from PIL import Image
import shutil
import pandas as pd 
import numpy as np
import cv2

!pip install roboflow

shutil.copyfile('/content/gdrive/My Drive/OmskDronHack/omsk/sample_solution.csv', 'sample_solution.csv')

shutil.copyfile('/content/gdrive/My Drive/OmskDronHack/test_dataset_test.zip', 'test.zip')
!unzip test.zip
!rm test.zip

!git clone https://github.com/ultralytics/yolov5.git
!pip install -r ./yolov5/requirements.txt

from roboflow import Roboflow
rf = Roboflow(api_key="eQlm0MhF7mn48THFHNU0")
project = rf.workspace("nsuem").project("dron-people")
dataset = project.version(23).download("yolov5")

os.makedirs('/content/yolov5/DronPeopleDataSet23')
from distutils.dir_util import copy_tree
copy_tree("/content/Dron-People-23", "/content/yolov5/DronPeopleDataSet")

category_names = ['human']
category_names = {k: v for v, k in enumerate(category_names)}
names_str = " \n ".join([f'{item[1]}: {item[0]}' for item in list(zip(category_names.keys(), category_names.values()))])
yaml_content = f"""
train: /content/yolov5/DronPeopleDataSet/train/images
val: /content/yolov5/DronPeopleDataSet/valid/images

# number of classes
nc: 1

# class names
names: \n {names_str}
"""

with open('/content/yolov5/DronPeopleDataSet/dataset.yaml', 'w') as f:
    f.write(yaml_content)

!cat /content/yolov5/DronPeopleDataSet/dataset.yaml

!cd yolov5 && python train.py --img 1920 --batch 4 --epochs 30 --data DronPeopleDataSet/dataset.yaml --weights yolov5m.pt --cache

# torch.save(model.state_dict(), '/content/gdrive/My Drive/OmskDronHack/model_detect_yolo_robo23_2.pt')
shutil.copyfile('/content/yolov5/runs/train/exp/weights/best.pt', '/content/gdrive/My Drive/OmskDronHack/model_yolo_robo23_1.pt')

!cd yolov5 && python detect.py --augment --img 1920 --conf 0.25 --source '../test' --weights /content/yolov5/runs/train/exp/weights/best.pt --save-txt --save-conf --half

def get_solution_labels_df(path_to_txt_folder):
    simple_solution = []
    for detection_file in os.listdir(path_to_txt_folder):
        img_name = sample_submition[sample_submition['ID_img'].str.contains(detection_file.split('.')[0])]['ID_img'].iloc[0]
        with open(path_to_txt_folder + detection_file, 'r') as f:
            data = f.read()
            data = [i for i in data.split('\n') if i != '']
        for line in data:
            val = [float(i) for i in line.split()]
            cls, xywh, conf = val[0], val[1:5], val[5]
            center_x, center_y, width, height = xywh
            xmin = center_x - (width / 2)
            xmax = center_x + (width / 2)
            ymin = center_y - (height / 2)
            ymax = center_y + (height / 2)
            simple_solution.append([img_name, cls, conf, xmin, xmax, ymin, ymax, center_x, center_y, width, height])
    return simple_solution

sample_submition = pd.read_csv('sample_solution.csv')

test_predicts = get_solution_labels_df(f'./yolov5/runs/detect/exp3/labels/')
test_predicts = pd.DataFrame(test_predicts, columns=['ID_image', 'label', 'Conf', 'XMin', 'XMax', 'YMin', 'YMax', 'center_x', 'center_y', 'width', 'height'])

test_predicts = test_predicts[test_predicts.Conf > 0.5] # 
test_predicts.head(2)

test_dir = '/content/test'
for i, row in test_predicts.iterrows():
    # print(f'{test_dir}/{row["ID_image"]}')
    img = cv2.imread(f'{test_dir}/{row["ID_image"]}')
    h, w = img.shape[0], img.shape[1]
    center_x = row['center_x'] * w
    center_y = row['center_y'] * h
    width = row['width'] * w
    height = row['height'] * h
    r = width / 2
    
    test_predicts.at[i,'cx'] = int(center_x)
    test_predicts.at[i,'cy'] = int(center_y)
    test_predicts.at[i,'r'] = int(r)
    
test_predicts['cx'] = test_predicts['cx'].astype(int)
test_predicts['cy'] = test_predicts['cy'].astype(int)
test_predicts['r'] = test_predicts['r'].astype(int)

import matplotlib.pyplot as plt

detect_img_path = f'./yolov5/runs/detect/exp'
uniq_imgs_list = test_predicts['ID_image'].unique()
img_path = f'{detect_img_path}/{uniq_imgs_list[7]}'
img = cv2.imread(img_path)
plt.figure(figsize=(30, 20))
plt.imshow(img)

sample_submition['region_shape'] = sample_submition['region_shape'].astype('object')
for i, row in sample_submition.iterrows():
    if len(test_predicts[test_predicts.ID_image == row["ID_img"]]) > 0:
        circle_coords = [f'{{"cx":{item[1]["cx"]}, "cy":{item[1]["cy"]}, "r":{int(item[1]["r"])}}}' for item in test_predicts[test_predicts.ID_image == row['ID_img']].sort_values(by=['cx', 'cy']).iterrows()]
        # print(circle_coords)
        sample_submition.at[i, 'region_shape'] = circle_coords
    else:
        sample_submition.at[i, 'region_shape'] = 0

import json

index = 63
img = cv2.imread(f'{test_dir}/{sample_submition.iloc[index]["ID_img"]}')

coords_str = str(sample_submition.iloc[index]['region_shape']).replace("'", "")
circle_coords = json.loads(coords_str)
yolo_coords_f = ''
for item in circle_coords:
    cx = item['cx']
    cy = item['cy']
    r = int(item['r']

    img = cv2.circle(img, (cx, cy), r, (255,0,0), 2)
    
plt.figure(figsize=(30, 20))
plt.imshow(img)

sample_submition.to_csv('/content/gdrive/My Drive/OmskDronHack/omsk/Submits/submit60.csv', index=False)